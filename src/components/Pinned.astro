---
import ProgressBar from "@components/ProgressBar.astro"
import PinnedIndex from "@components/PinnedIndex.astro"
import Card from "@components/Card.astro"
---

<section class="pinned">
    <div class="pinned__content">
        <div class="pinned__content__sticky-header">
            <h2>The Roadmap</h2>
        </div>

        <ProgressBar />

        <div class="pinned__indices">
            <PinnedIndex
                iconName="bulb"
                date="May 15th"
                title="Beta Launch"
                class="index-1"
            />

            <PinnedIndex
                iconName="rocket"
                date="Juli 1st"
                title="Public Release"
                class="index-2"
            />

            <PinnedIndex
                iconName="puzzle"
                date="August 2th"
                title="Public Release"
                class="index-3"
            />

            <PinnedIndex
                iconName="trending-up"
                date="October 5th"
                title="Public Release"
                class="index-4"
            />
        </div>

        <div class="cards">
            <Card
                phase="Phase #01"
                body="From May 15th"
                title="Beta <span>Launch</span>"
                class="card-1"
            />

            <Card
                phase="Phase #02"
                body="From Juli 1st"
                title="Public <span>Release</span>"
                class="card-2"
            />

            <Card
                phase="Phase #03"
                body="From August 20th"
                title="API <span>Integration</span>"
                class="card-3"
            />

            <Card
                phase="Phase #04"
                body="From October 5th"
                title="Pro <span>Features</span>"
                class="card-4"
            />
        </div>
    </div>
</section>

<style>
    .pinned {
        width: 100vw;
        height: 100vh;
    }

    .pinned__content {
    }

    .pinned__content__sticky-header {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        opacity: 1;

        h2 {
            font-size: 130px;
            font-weight: lighter;
            color: transparent;
            -webkit-text-stroke: 2px #fff;
        }
    }

    .pinned__indices {
        position: absolute;
        top: 0;
        right: 24px;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 4em;
        opacity: 0;
    }

    .index-1 {
    }
</style>

<script>
    import Lenis from "lenis"
    import { gsap } from "gsap"
    import { ScrollTrigger } from "gsap/ScrollTrigger"

    gsap.registerPlugin(ScrollTrigger)

    // Initialize a new Lenis instance for smooth scrolling
    const lenis = new Lenis()

    // Listen for the 'scroll' event and log the event data to the console
    // lenis.on("scroll", (e) => {
    //     console.log(e)
    // })

    // Synchronize Lenis scrolling with GSAP's ScrollTrigger plugin
    lenis.on("scroll", ScrollTrigger.update)

    // Add Lenis's requestAnimationFrame (raf) method to GSAP's ticker
    // This ensures Lenis's smooth scroll animation updates on each GSAP tick
    gsap.ticker.add((time) => {
        lenis.raf(time * 1000) // Convert time from seconds to milliseconds
    })

    // Disable lag smoothing in GSAP to prevent any delay in scroll animations
    gsap.ticker.lagSmoothing(0)

    const $pinnedSection = document.querySelector(".pinned")
    const $stickyHeader = document.querySelector(
        ".pinned__content__sticky-header",
    )
    const $cards = document.querySelectorAll(".card")
    const $progressBarContainer = document.querySelector(".progress-bar")
    const $progressBar = document.querySelector(".progress-bar__progress")
    const $indicesContainer = document.querySelector(".pinned__indices")
    const $indices = document.querySelectorAll(".pinned-index")
    const cardCount = $cards?.length
    const pinnedHeight = window.innerHeight * (cardCount + 1)
    const startRotations = [0, 5, 0, -5]
    const endRotations = [-10, -5, 10, -5]
    const progressColors = ["#ecb74c", "#7dd8cd", "#e0ff57", "#7dd8cd"]

    $cards.forEach((card, index) => {
        gsap.set(card, { rotation: startRotations[index] })
    })

    let isProgressBarVisible = false
    let currentActiveIndex = -1

    function animateIndexOpacity(newIndex: number) {
        if (newIndex !== currentActiveIndex) {
            $indices.forEach((index, i: number) => {
                gsap.to(index, {
                    opacity: i === newIndex ? 1 : 0.25,
                    duration: 0.5,
                    ease: "power2.out",
                })
            })

            currentActiveIndex = newIndex
        }
    }

    function showProgressAndIndices() {
        gsap.to([$progressBarContainer, $indicesContainer], {
            opacity: 1,
            duration: 0.5,
            ease: "power2.out",
        })

        isProgressBarVisible = true
    }

    function hideProgressAndIndices() {
        gsap.to([$progressBarContainer, $indicesContainer], {
            opacity: 0,
            duration: 0.5,
            ease: "power2.out",
        })

        isProgressBarVisible = false

        animateIndexOpacity(-1)
    }

    ScrollTrigger.create({
        trigger: $pinnedSection,
        start: "top top",
        end: `+=${pinnedHeight}`,
        pin: true,
        pinSpacing: true,
        onLeave: () => hideProgressAndIndices(),
        onEnterBack: () => showProgressAndIndices(),
        onUpdate: (self) => {
            const progress = self.progress * (cardCount + 1)

            console.log(progress)
            
            const currentCard = Math.floor(progress)

            console.log({currentCard})

            if (progress <= 1) {
                gsap.to($stickyHeader, {
                    opacity: 1 - progress,
                    duration: 0.1,
                    ease: "none",
                })
            } else {
                gsap.to($stickyHeader, {
                    opacity: 0,
                })
            }

            if (progress > 1 && !isProgressBarVisible) {
                showProgressAndIndices()
            } else if (progress <= 1 && isProgressBarVisible) {
                hideProgressAndIndices()
            }

            let progressHeight = 0
            let colorIndex = -1

            if (progress > 1) {
                progressHeight = ((progress - 1) / cardCount) * 100
                colorIndex = Math.min(Math.floor(progress - 1), cardCount - 1)
            }

            gsap.to($progressBar, {
                height: `${progressHeight}%`,
                backgroundColor: progressColors[colorIndex],
                duration: 0.3,
                ease: "power1.out"
            })

            if (isProgressBarVisible) {
                animateIndexOpacity(colorIndex)
            }

            $cards.forEach((card, index) => {
                if (index < currentCard) {
                    gsap.set(card, {
                        top: '50%',
                        rotation: endRotations[index]
                    })
                } else if (index === currentCard) {
                    const cardProgress = progress - currentCard
                    const newTop = gsap.utils.interpolate(150, 50, cardProgress)
                    const newRotation = gsap.utils.interpolate(
                        startRotations[index],
                        endRotations[index],
                        cardProgress
                    )

                    gsap.set(card, {
                        top: `${newTop}%`,
                        rotation: newRotation
                    })
                } else {
                    gsap.set(card, {
                        top: "150%",
                        rotation: startRotations[index]
                    })
                }
            })
        },
    })
</script>
